// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OrderStatusEnum string

const (
	OrderStatusEnumPending   OrderStatusEnum = "pending"
	OrderStatusEnumCompleted OrderStatusEnum = "completed"
)

func (e *OrderStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatusEnum(s)
	case string:
		*e = OrderStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatusEnum: %T", src)
	}
	return nil
}

type NullOrderStatusEnum struct {
	OrderStatusEnum OrderStatusEnum `json:"order_status_enum"`
	Valid           bool            `json:"valid"` // Valid is true if OrderStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatusEnum), nil
}

type UserRoleEnum string

const (
	UserRoleEnumBusiness UserRoleEnum = "business"
	UserRoleEnumCustomer UserRoleEnum = "customer"
)

func (e *UserRoleEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRoleEnum(s)
	case string:
		*e = UserRoleEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRoleEnum: %T", src)
	}
	return nil
}

type NullUserRoleEnum struct {
	UserRoleEnum UserRoleEnum `json:"user_role_enum"`
	Valid        bool         `json:"valid"` // Valid is true if UserRoleEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRoleEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UserRoleEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRoleEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRoleEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRoleEnum), nil
}

type Menu struct {
	ID           pgtype.UUID `json:"id"`
	Name         string      `json:"name"`
	Description  string      `json:"description"`
	Price        int32       `json:"price"`
	Category     string      `json:"category"`
	Image        string      `json:"image"`
	RestaurantId pgtype.UUID `json:"restaurantId"`
}

type Order struct {
	ID           pgtype.UUID      `json:"id"`
	TableNumber  int32            `json:"tableNumber"`
	OrderedItems []byte           `json:"orderedItems"`
	TotalPrice   int32            `json:"totalPrice"`
	Status       OrderStatusEnum  `json:"status"`
	Date         pgtype.Timestamp `json:"date"`
	OrderId      string           `json:"orderId"`
	RestaurantId pgtype.UUID      `json:"restaurantId"`
	UserId       pgtype.UUID      `json:"userId"`
}

type Restaurant struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
	Address     string      `json:"address"`
	Logo        string      `json:"logo"`
	OwnerId     pgtype.UUID `json:"ownerId"`
}

type User struct {
	ID           pgtype.UUID  `json:"id"`
	Name         string       `json:"name"`
	Email        string       `json:"email"`
	PasswordHash string       `json:"passwordHash"`
	Role         UserRoleEnum `json:"role"`
}
